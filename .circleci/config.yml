version: 2
jobs:
  build:
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Install dependencies
          command: ./gradlew build -x test
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - build
  test:
    # Remove if parallelism is not desired
    parallelism: 2
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
      name: "Setup custom environment variables"
      command:
          echo 'export TELEGRAM_EXTERNALURL= $CIRCLE_BUILD_URL' >> $BASH_ENV
            echo 'export TELEGRAM_CREATORID= $CREATOR_ID' >> $BASH_ENV
            echo 'export TELEGRAM_PROXYHOST= $PROXY_HOST' >> $BASH_ENV
            echo 'export TELEGRAM_PROXYPORT= $PROXY_PORT' >> $BASH_ENV
            echo 'export TELEGRAM_PROXYUSER= $PROXY_USER' >> $BASH_ENV
            echo 'export TELEGRAM_PROXYPASSWORD= $PROXY_PASSWORD' >> $BASH_ENV
            echo 'export TELEGRAM_BOTTOKEN= $BOT_TOKEN' >> $BASH_ENV
            echo 'export TELEGRAM_BOTUSERNAME= $BOT_USERNAME' >> $BASH_ENV
            - run:
            name: Run tests
            command: ./gradlew test $GRADLE_ARGS  --info
              - run:
                  name: Generate code coverage report
                  command:
                    ./gradlew jacocoTestReport
              - store_test_results:
                  path: build/test-results/test
              - store_artifacts:
                  path: build/test-results/test
                  when: always
              - store_artifacts:
                  path: build/reports/jacoco/test/html
                  when: always
                    - run:
                        name: Assemble JAR
                        command: |
                          # Skip this for other nodes
                          if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
                            ./gradlew assemble
                          fi
                    # This will be empty for all nodes except the first one
                    - store_artifacts:
                        path: build/libs

workflows:
  version: 2
  workflow:
    jobs:
      - build
      - test:
          requires:
            - build